#!/bin/bash
#
# About: Auto Update
# Author: liberodark
# Thanks :
# License: GNU GPLv3

version="0.2.5"

echo "Welcome on Auto Update Script $version"

#=================================================
# CHECK ROOT
#=================================================

if [[ $(id -u) -ne 0 ]] ; then echo "Please run as root" ; exit 1 ; fi

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST AND VAR
#=================================================

distribution=$(cat /etc/*release | grep "PRETTY_NAME" | sed 's/PRETTY_NAME=//g' | sed 's/["]//g' | awk '{print $1}')

update="/usr/bin/check_updates"
centos_conf="/etc/yum.repos.d/CentOS-Base.repo"
alma_conf="/etc/yum.repos.d/almalinux.repo"
yum_fastestmirror="/etc/yum/pluginconf.d/fastestmirror.conf"
date=$(date +%Y.%m.%d_%H-%M-%S)
dest="/root/.backup-repo"
lock="/tmp/auto-update.lock"

exec 9>"${lock}"
flock -n 9 || exit

detect_pve(){
if test -e "/etc/pve"; then
echo "Proxmox stop VMs & CTs"
VMID_VM=$(qm list| awk '/[0-9]/ {print $1}')
VMID_CT=$(pct list| awk '/[0-9]/ {print $1}')

# Stop VM
for VM in $VMID_VM
do
    qm shutdown "$VM" || exit
done

for VM in $VMID_VM
do
    while [[ $(qm status "$VM") =~ running ]] ; do
        sleep 1
    done
done

# Stop CT
for CT in $VMID_CT
do
    pct shutdown "$CT" || exit
done

for CT in $VMID_CT
do
    while [[ $(pct status "$CT") =~ running ]] ; do
        sleep 1
    done
done
fi
}

detect_update(){
if [ ! -f "$update" ]; then
echo "Error check_updates is not installed correctly"
ln -s /usr/local/nagios/libexec/check_updates /usr/bin/check_updates
fi
}

detect_yum_fastestmirror(){
if [ -f "$yum_fastestmirror" ]; then
echo "Remove Yum fastestmirror"
sed -i "s@enabled=1@enabled=0@g" /etc/yum/pluginconf.d/fastestmirror.conf
fi
}

detect_yum_repo(){
if [ -f "$centos_conf" ] || [ -f "$alma_conf" ]; then
echo "Error Yum configuration already is installed"
mkdir -p "$dest"
cp -a /etc/yum.repos.d "$dest"/"$date"
find /etc/yum.repos.d/ -type f -not -name 'myrepo.repo' -delete
fi
}

gitlab_check(){
if ! command -v gitlab-ctl > /dev/null 2>&1; then
    echo "Gitlab not installed"
else
    echo "Stop Gitlab services"
    gitlab-ctl stop
fi
}

stop_service(){
echo "Trying to stop Services"
systemctl stop nrpe > /dev/null 2>&1
systemctl stop docker > /dev/null 2>&1
systemctl stop dockerd > /dev/null 2>&1
systemctl stop alfresco > /dev/null 2>&1
/etc/init.d/confluence stop > /dev/null 2>&1 || systemctl stop confluence > /dev/null 2>&1
/etc/init.d/jira stop > /dev/null 2>&1 || systemctl stop jira > /dev/null 2>&1
systemctl stop httpd > /dev/null 2>&1
systemctl stop nginx > /dev/null 2>&1
systemctl stop apache2 > /dev/null 2>&1
systemctl stop tomcat > /dev/null 2>&1
systemctl stop gitea > /dev/null 2>&1
systemctl stop mariadb > /dev/null 2>&1
systemctl stop mysql > /dev/null 2>&1
systemctl stop mysqld > /dev/null 2>&1
systemctl stop postgres > /dev/null 2>&1
systemctl stop postgresql-* > /dev/null 2>&1
systemctl stop rsyslog > /dev/null 2>&1
systemctl stop nagios > /dev/null 2>&1
}

pkcon_check(){
if ! command -v pkcon > /dev/null 2>&1; then
echo "Install PackageKit ($distribution)"

    if [ "$distribution" = "CentOS" ] || [ "$distribution" = "AlmaLinux" ] || [ "$distribution" = "Rocky" ] || [ "$distribution" = "Red\ Hat" ] || [ "$distribution" = "Oracle" ]; then
      yum install -y PackageKit > /dev/null 2>&1
      
    elif [ "$distribution" = "Fedora" ]; then
      dnf install -y PackageKit > /dev/null 2>&1
    
    elif [ "$distribution" = "Debian" ] || [ "$distribution" = "Raspbian" ] || [ "$distribution" = "Armbian" ] || [ "$distribution" = "Ubuntu" ] || [ "$distribution" = "Deepin" ]; then
      apt-get update > /dev/null 2>&1
      apt-get install -y packagekit packagekit-tools > /dev/null 2>&1
      
    elif [ "$distribution" = "Clear" ]; then
      swupd bundle-add packagekit > /dev/null 2>&1
      
    elif [ "$distribution" = "Manjaro" ] || [ "$distribution" = "Arch\ Linux" ]; then
      pacman -S packagekit --noconfirm > /dev/null 2>&1
      
    elif [ "$distribution" = "openSUSE" ] || [ "$distribution" = "SUSE" ]; then
      zypper install -y PackageKit > /dev/null 2>&1

    fi
fi
}

fix_cache(){
echo "Fix PackageKit Cache"
systemctl stop packagekit
sed -i "s@#KeepCache=false@KeepCache=false@g" /etc/PackageKit/PackageKit.conf
systemctl start packagekit
}

pkcon_refresh(){
echo "Pkcon Refresh Cache"
rm -rf /var/cache/PackageKit
pkcon refresh force -c -1 > /dev/null 2>&1
}

reboot_os(){
echo -e "\e[31mUpdate Finish : System wheel reboot in 30s\e[0m"
sleep 30
shutdown -r now || sudo reboot -p || sudo reboot -f
}

make_update(){
if [ "$distribution" = "CentOS" ] || [ "$distribution" = "AlmaLinux" ] || [ "$distribution" = "Rocky" ] || [ "$distribution" = "Red\ Hat" ] || [ "$distribution" = "Oracle" ]; then
  detect_update || exit
  detect_yum_repo || exit
  detect_yum_fastestmirror || exit
  gitlab_check
  stop_service
  pkcon_check || exit
  fix_cache || exit
  pkcon_refresh || exit
  check_updates -lock /tmp/check_updates.lock -update -y
  reboot_os
      
elif [ "$distribution" = "Fedora" ]; then
  detect_update || exit
  gitlab_check
  stop_service
  pkcon_check || exit
  fix_cache || exit
  pkcon_refresh || exit
  check_updates -lock /tmp/check_updates.lock -update -y
  reboot_os
    
elif [ "$distribution" = "Debian" ] || [ "$distribution" = "Raspbian" ] || [ "$distribution" = "Armbian" ] || [ "$distribution" = "Ubuntu" ] || [ "$distribution" = "Deepin" ]; then
  detect_pve || exit
  detect_update || exit
  gitlab_check
  stop_service
  pkcon_check || exit
  fix_cache || exit
  pkcon_refresh || exit
  check_updates -lock /tmp/check_updates.lock -update -y
  reboot_os
fi
}

make_update || exit
